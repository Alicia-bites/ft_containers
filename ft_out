should be constant with the same seed: 800051032
abcdefghijklmnopqrstuvwxyz
Starting my own tests
Creating two empty stacks...
[38;5;33mTEST #1

[0m[38;5;40mTesting .empty() --> 
[0m[38;5;214mmyStack returns : 1
[0m
[38;5;33m#########################################################
[0m[38;5;33mTEST #2

[0m[38;5;40mTesting .size() --> 
[0m[38;5;214mmyStack returns : 0
[0m
[38;5;33m#########################################################
[0m[38;5;33mTEST #3

[0m[38;5;40mTesting .push() and .top() --> 
[0m[38;5;214mmyStack returns : 3
[0m
[38;5;33m#########################################################
[0m[38;5;33mTEST #4

[0mCreating two containers stack with 'vector' as underlying container. The vector's name is 'gandalf' and it contains 2 elements of type 'int' and of value '4'...

Pushing 1 element of value 1.
[38;5;214mmyStack returns : 1
[0m
[38;5;40mTesting .pop() --> 
[0m[38;5;214mmyStack returns : 4
[0m
[38;5;33m#########################################################
[0m[38;5;33mTEST #5

[0mCreating two containers stack with 'vector' as underlying container. The vector's name is 'gandalf' and it contains 2 elements of type 'int' and of value '4'...

Pushing one element in frodo
Creating 1 more vector samwise with nothing in it...
[38;5;214mfrodo.top() : 1
[0m
[38;5;40mTesting operator < --> 
[0m[38;5;214mfrodo < samwise : 0

[38;5;40mTesting operator > --> 
[0m[38;5;214mfrodo > samwise : 1

[38;5;40mTesting operator <= --> 
[0m[38;5;214mfrodo <= samwise : 0

[38;5;40mTesting operator >= --> 
[0m[38;5;214mfrodo >= samwise : 1

[38;5;40mTesting operator == --> 
[0m[38;5;214mfrodo == samwise : 0

[38;5;40mTesting operator != --> 
[0m[38;5;214mfrodo != samwise : 1


[38;5;33m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #1
[0m[38;5;81mTesting default constructor[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #2

[0m[38;5;81mTesting empty container constructor and fill constructor[0m

Printing content of myVector_0 :
- START -
0 : 0
1 : 0
2 : 0
3 : 0
- END -
Printing content of myVector :
- START -
0 : 6
1 : 6
2 : 6
3 : 6
- END -

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #3

[0m[38;5;81mTesting range constructor[0m

Constructing a vector with range using iterators
Printing content of myVector :
1
2
3
4
5
6
7
8
9
10

Printing content of myVector_it_test :
1
2
3
4
5
6
7
8
9
10

Constructing a vector with range using front() and back()
Printing content of gandalf :
10
Printing content of frodo :
10


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #4

[0m[38;5;81mTesting copy constructor[0m

Printing content of myVector 
1
2
3
4
5
6
7
8
9
10
Creating a copy of myVector...
Printing content of copy_myVector :
1
2
3
4
5
6
7
8
9
10


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #5

[0m[38;5;81mTesting swap member function[0m

gandalf | galadriel
1       | 2
3       | 4
5       | 6
gandalf | galadriel
2       | 1
4       | 3
6       | 5


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #6

[0m[38;5;81mTesting assignement operator, with 2 vectors of the same size[0m

gandalf | galadriel
1       | 2
3       | 4
5       | 6
gandalf | galadriel
2       | 2
4       | 4
6       | 6


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #7

[0m[38;5;81mTesting assignement operator, with the src smaller than the recever[0m

gandalf | galadriel
1       | 2
3       | N
5       | N
gandalf | galadriel
2       | 2


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #8

[0m[38;5;81mTesting assignement operator, with the src bigger than the recever[0m

gandalf | galadriel
2       | 1
N       | 3
N       | 5
gandalf | galadriel
1       | 1
3       | 3
5       | 5


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #9

[0m[38;5;81mTesting vector::assign, with 2 vectors of the same size[0m

sauron | saruman
1      | 2
3      | 4
5      | 6

sauron | saruman
2      | 2
4      | 4
6      | 6


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #10

[0m[38;5;81mTesting vector::iterator[0m

ft  : 1

ft  : 0

ft  : 3

ft  : 3

ft  : 0

ft  : 5

ft  : 1

ft  : 3



[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #11

[0m[38;5;81mTesting reverse_iterator[0m

Testing that reverse_iterator correctly iterates over a container in reverse order.
*it = 5
i  = 5
*it = 4
i  = 4
*it = 3
i  = 3
*it = 2
i  = 2
*it = 1
i  = 1

Testing that the reverse_iterator supports comparison with the == operator
Is it1 == to it2 ? 1 for yes, 0 for no. --> 
ANSWER = 1

Testing that the reverse_iterator supports the + and - operators for arithmetic operations
*it4 + 2 --> *it4 should be equal to 3
 *it4 = 3
it4 = it4 - 1 --> *it4 should be equal to 4
 *it4 = 4

Testing that the reverse_iterator supports the < operator for comparison
*it5 is pointing at the last element
it6 is it5 + 2 
 Is it5 < it6 ? The answer should be 1 --> 1

Testing that the reverse_iterator works correctly with the [] operator
it[0] = 5
it[1] = 4


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #12

[0m[38;5;81mTesting rbegin() and rend()[0m

rit is : wall
rit + 1 is : the
rit_rend - 1 is : another


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #13

[0m[38;5;81mTesting vector::size and vector::capacity[0m

In pinkFloyd : 
another | brick | on | the | wall | 
another | brick | on | the | wall | 
pinkFloyd.size() = 5
pinkFloyd.capacity() = 5
---------------------------------------------------
In gandalf : 
0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 
gandalf size is : 13
gandalf capacity is : 20


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #14

[0m[38;5;81mTesting vector::resize and vector::reserve[0m

In myVector : 
1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 
[38;5;86mresizing to 15[0m
In myVector : 
1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 
myVector size is : 15
myVector capacity is : 20
[38;5;86mresizing to 5[0m
1 | 1 | 1 | 1 | 1 | 
myVector size is : 5
myVector capacity is : 20
[38;5;86mresizing to 5 again[0m
1 | 1 | 1 | 1 | 1 | 
myVector size is : 5
myVector capacity is : 20


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #15

[0m[38;5;81mTesting vector::empty[0m

[38;5;86mCreating std_vector with one element.[0m
Is empty? 1 for yes, 0 for no --> 0
[38;5;86mremoving that element with pop_back()[0m
Is empty? 1 for yes, 0 for no --> 1


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #16

[0m[38;5;81mTesting at(), front() and back()[0m

In pinkFloyd  :another | brick | on | the | wall | 
front() --> another
back() --> wall
at(4) --> wall


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #17

[0m[38;5;81mTesting push_back()[0m

------------------------------------------

In pinkFloyd :vector size is 4
vector capacity is 4
another | brick | on | the | 

[38;5;86mThis is how pinkFloyd behaves : [0m

pinkFloyd size is : 4
pinkFloyd capacity is : 4

[38;5;86musing push_back() --> [0m
vector size is 5
vector capacity is 5
another | brick | on | the | wall | 

pinkFloyd size is : 5
pinkFloyd capacity is : 8

------------------------------------------

[38;5;86mLet's check how push_back() behaves when starting from an empty vector.
vector size is 0
vector capacity is 0

vector size is 1
vector capacity is 1
42 | 
myVector size is : 1
myVector capacity is : 1


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #18

[0m[38;5;81mTesting insert() with one element[0m

vector size is 6
vector capacity is 6
another | brick | peanuts | on | the | wall | 
pinkFloyd size is : 6


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #19

[0m[38;5;81mTesting insert() with n elements[0m

vector size is 8
vector capacity is 8
another | brick | peanuts | peanuts | peanuts | on | the | wall | 
pinkFloyd size is : 8
pinkFloyd capacity is : 10



[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #20

[0m[38;5;81mTesting insert() with sequence[0m

vector size is 5
vector capacity is 5
1 | 4 | 5 | 2 | 3 | 


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #21

[0m[38;5;81mTesting erase() with one element[0m

In ft_ledzep : 
vector size is 4
vector capacity is 4
gonna | make | you | groove | 
[38;5;202mIn ft_ledzep : 
vector size is 3
vector capacity is 3
gonna | make | you | 
[0m
output = groove


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #22

[0m[38;5;81mTesting erase() with sequence[0m

In ft_ledzep : 
vector size is 4
vector capacity is 4
gonna | make | you | groove | 
[38;5;202mIn ft_ledzep : 
vector size is 2
vector capacity is 2
gonna | make | 
[0m
output = you
ft_ledzep size is : 2


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #23

[0m[38;5;81mTesting clear() function[0m

In myVector : 
vector size is 5
vector capacity is 5
1 | 2 | 3 | 4 | 5 | 

In myVector : 
vector size is 0
vector capacity is 0


myVector size is 0
myVector capacity is 5


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #24

[0m[38;5;81mTesting assign() member function[0m

In myVector : 
vector size is 5
vector capacity is 5
1 | 2 | 3 | 4 | 5 | 

In myVector : 
vector size is 2
vector capacity is 2
43 | 44 | 

myVector size is 2
myVector capacity is 5

[38;5;76mTesting assign(n, val)[0m
In myVector : 
vector size is 0
vector capacity is 0


myVector size is 0
myVector capacity is 5


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #25

[0m[38;5;81mTesting comparators[0m

 ft_potatoes == ft_carrots : 0
 ft_potatoes < ft_carrots : 0
 ft_potatoes != ft_carrots : 1
 ft_potatoes > ft_carrots : 1
 ft_potatoes >= ft_carrots : 1
 ft_potatoes <= ft_carrots : 0


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #26

[0m[38;5;81mTesting pair and make_pair[0m

1
Aie Aie
2
Captain
myPair == myPair2 = 0
myPair != myPair2 = 1
myPair < myPair2 = 1
myPair > myPair2 = 0
myPair <= myPair2 = 1
myPair >= myPair2 = 0

42
what's up


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #27

[0m[38;5;81mTesting max_size()[0m

kirikou = 2305843009213693951


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #28

[0m[38;5;81mTesting swap_main[0m

[38;5;27m-----------------------------------------------------------------------------
Printing bob
vector size is 3
vector capacity is 3
what's up | what's up | what's up | 
[38;5;27m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing bob
vector size is 3
vector capacity is 3
what's up | what's up | what's up | 
[38;5;27m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing bobby
vector size is 3
vector capacity is 3
what's up | what's up | what's up | 
[38;5;27m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing bobby
vector size is 3
vector capacity is 3
what's up | what's up | what's up | 
[38;5;27m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing louis
vector size is 2
vector capacity is 2
7000 | 7000 | 
[38;5;27m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing louison
vector size is 2
vector capacity is 2
7000 | 7000 | 
[38;5;27m-----------------------------------------------------------------------------[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #29

[0m[38;5;81mTesting push_back[0m

[38;5;27m-----------------------------------------------------------------------------
Printing two
vector size is 20
vector capacity is 20
two | two | two | two | two | heey | heey | heey | heey | heey | heey | heey | heey | heey | heey | heey | heey | heey | heey | heey | 
[38;5;27m-----------------------------------------------------------------------------[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mTEST #1
[0m[38;5;81m--[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #2
[0m[38;5;81mTesting insert(const value_type & input_pair)[0m

Inserted first into the map with key 7
Key 7 already has the value first in the map
Inserted second into the map with key 4
Inserted third into the map with key 10
Inserted fourth into the map with key 15


[38;5;27m-----------------------------------------------------------------------------
Printing mappy
[38;5;39mmap size is 4
Key  = Value
[38;5;202m4    =    [38;5;44msecond
[38;5;202m7    =    [38;5;44mfirst
[38;5;202m10    =    [38;5;44mthird
[38;5;202m15    =    [38;5;44mfourth

[38;5;4m-----------------------------------------------------------------------------[0m
Testing copy constructor
[38;5;27m-----------------------------------------------------------------------------
Printing coppy
[38;5;39mmap size is 4
Key  = Value
[38;5;202m4    =    [38;5;44msecond
[38;5;202m7    =    [38;5;44mfirst
[38;5;202m10    =    [38;5;44mthird
[38;5;202m15    =    [38;5;44mfourth

[38;5;4m-----------------------------------------------------------------------------[0m
Removing one node with key 10 
output = 1
Removing one node with key 15 
output = 1
Removing one node with key 7 
output = 1


[38;5;27m-----------------------------------------------------------------------------
Printing mappy
[38;5;39mmap size is 1
Key  = Value
[38;5;202m4    =    [38;5;44msecond

[38;5;4m-----------------------------------------------------------------------------[0m

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #3
[0m[38;5;81mTesting iterator
[0m

------------------------------------------------------------------
June's begin is = 1
[38;5;79mTesting incrementation of iterator --> First with i++ : [0m
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

[38;5;79mThen with ++i : [0m
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
it = 15
it1 = 15

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #4
[0m[38;5;81mTesting reverse_iterator[0m

[38;5;79mTesting incrementation of reverse_iterator --> First with i++ : [0m
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
[38;5;79mThen with ++i : [0m
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #5
[0m[38;5;81mTesting RedBlackTree insert node function[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #6
[0m[38;5;81mMore insert tests[0m

output = 42 | lol
[38;5;27m-----------------------------------------------------------------------------
Printing mp
[38;5;39mmap size is 1
Key  = Value
[38;5;202m42    =    [38;5;44mlol

[38;5;4m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing mp
[38;5;39mmap size is 1
Key  = Value
[38;5;202m42    =    [38;5;44mlol

[38;5;4m-----------------------------------------------------------------------------[0m
output = 50 | mdr
[38;5;27m-----------------------------------------------------------------------------
Printing mp
[38;5;39mmap size is 2
Key  = Value
[38;5;202m42    =    [38;5;44mlol
[38;5;202m50    =    [38;5;44mmdr

[38;5;4m-----------------------------------------------------------------------------[0m
output = 35 | funny
[38;5;27m-----------------------------------------------------------------------------
Printing mp
[38;5;39mmap size is 3
Key  = Value
[38;5;202m35    =    [38;5;44mfunny
[38;5;202m42    =    [38;5;44mlol
[38;5;202m50    =    [38;5;44mmdr

[38;5;4m-----------------------------------------------------------------------------[0m
output = 45 | bunny
[38;5;27m-----------------------------------------------------------------------------
Printing mp
[38;5;39mmap size is 4
Key  = Value
[38;5;202m35    =    [38;5;44mfunny
[38;5;202m42    =    [38;5;44mlol
[38;5;202m45    =    [38;5;44mbunny
[38;5;202m50    =    [38;5;44mmdr

[38;5;4m-----------------------------------------------------------------------------[0m
output = 21 | fizz
[38;5;27m-----------------------------------------------------------------------------
Printing mp
[38;5;39mmap size is 5
Key  = Value
[38;5;202m21    =    [38;5;44mfizz
[38;5;202m35    =    [38;5;44mfunny
[38;5;202m42    =    [38;5;44mlol
[38;5;202m45    =    [38;5;44mbunny
[38;5;202m50    =    [38;5;44mmdr

[38;5;4m-----------------------------------------------------------------------------[0m
output = 38 | buzz
[38;5;27m-----------------------------------------------------------------------------
Printing mp
[38;5;39mmap size is 6
Key  = Value
[38;5;202m21    =    [38;5;44mfizz
[38;5;202m35    =    [38;5;44mfunny
[38;5;202m38    =    [38;5;44mbuzz
[38;5;202m42    =    [38;5;44mlol
[38;5;202m45    =    [38;5;44mbunny
[38;5;202m50    =    [38;5;44mmdr

[38;5;4m-----------------------------------------------------------------------------[0m
55 | fuzzy
[38;5;27m-----------------------------------------------------------------------------
Printing mp
[38;5;39mmap size is 7
Key  = Value
[38;5;202m21    =    [38;5;44mfizz
[38;5;202m35    =    [38;5;44mfunny
[38;5;202m38    =    [38;5;44mbuzz
[38;5;202m42    =    [38;5;44mlol
[38;5;202m45    =    [38;5;44mbunny
[38;5;202m50    =    [38;5;44mmdr
[38;5;202m55    =    [38;5;44mfuzzy

[38;5;4m-----------------------------------------------------------------------------[0m
1337 | beauty
[38;5;27m-----------------------------------------------------------------------------
Printing mp2
[38;5;39mmap size is 1
Key  = Value
[38;5;202m1337    =    [38;5;44mbeauty

[38;5;4m-----------------------------------------------------------------------------[0m
1000 | Hello
[38;5;27m-----------------------------------------------------------------------------
Printing mp2
[38;5;39mmap size is 2
Key  = Value
[38;5;202m1000    =    [38;5;44mHello
[38;5;202m1337    =    [38;5;44mbeauty

[38;5;4m-----------------------------------------------------------------------------[0m
1500 | World
[38;5;27m-----------------------------------------------------------------------------
Printing mp2
[38;5;39mmap size is 3
Key  = Value
[38;5;202m1000    =    [38;5;44mHello
[38;5;202m1337    =    [38;5;44mbeauty
[38;5;202m1500    =    [38;5;44mWorld

[38;5;4m-----------------------------------------------------------------------------[0m

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #7
[0m[38;5;81mTesting insert range[0m

[38;5;27m-----------------------------------------------------------------------------
Printing another_map
[38;5;39mmap size is 0
Key  = Value

[38;5;4m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing lily
[38;5;39mmap size is 1
Key  = Value
[38;5;202mz    =    [38;5;44m777

[38;5;4m-----------------------------------------------------------------------------[0m

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #8
[0m[38;5;81mTesting find[0m

No key found
[38;5;27m-----------------------------------------------------------------------------
Printing lily
[38;5;39mmap size is 3
Key  = Value
[38;5;202ma    =    [38;5;44m777
[38;5;202mb    =    [38;5;44m777
[38;5;202mc    =    [38;5;44m777

[38;5;4m-----------------------------------------------------------------------------[0m
res = c -- 777
No key found

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #9
[0m[38;5;81mTesting find -- const version[0m

No key found
[38;5;27m-----------------------------------------------------------------------------
Printing lily
[38;5;39mmap size is 3
Key  = Value
[38;5;202ma    =    [38;5;44m777
[38;5;202mb    =    [38;5;44m777
[38;5;202mc    =    [38;5;44m777

[38;5;4m-----------------------------------------------------------------------------[0m
res = c -- 777
No key found

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #10
[0m[38;5;81mTesting key_comp[0m

mymap contains:
a => 100
b => 200
c => 300


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #11
[0m[38;5;81mTesting value_comp[0m

mymap contains:
x => 1001
y => 2002
z => 3003
1

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #12
[0m[38;5;81mTesting operator[][0m

[38;5;27m-----------------------------------------------------------------------------
Printing mymap
[38;5;39mmap size is 3
Key  = Value
[38;5;202ma    =    [38;5;44man element
[38;5;202mb    =    [38;5;44manother element
[38;5;202mc    =    [38;5;44manother element

[38;5;4m-----------------------------------------------------------------------------[0m
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #13
[0m[38;5;81mTesting replaced < by custom comp function[0m

[38;5;27m-----------------------------------------------------------------------------
Printing bob
[38;5;39mmap size is 15
Key  = Value
[38;5;202m1    =    [38;5;44m777
[38;5;202m2    =    [38;5;44m777
[38;5;202m3    =    [38;5;44m777
[38;5;202m4    =    [38;5;44m777
[38;5;202m5    =    [38;5;44m777
[38;5;202m6    =    [38;5;44m777
[38;5;202m7    =    [38;5;44m777
[38;5;202m8    =    [38;5;44m777
[38;5;202m9    =    [38;5;44m777
[38;5;202m10    =    [38;5;44m777
[38;5;202m11    =    [38;5;44m777
[38;5;202m12    =    [38;5;44m777
[38;5;202m13    =    [38;5;44m777
[38;5;202m14    =    [38;5;44m777
[38;5;202m15    =    [38;5;44m777

[38;5;4m-----------------------------------------------------------------------------[0m
8 = 777

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #14
[0m[38;5;81mTesting erase functions[0m

Testing erase #1

Testing erase #2

Testing erase #3
[38;5;57mRemoving from 4 to 13[0m
Tree should only have 13 left : 

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #15
[0m[38;5;81mTesting swap function[0m

foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #16
[0m[38;5;81mTesting clear member function[0m

mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #17
[0m[38;5;81mTesting lower_bound and upper_bound[0m

b
e
a => 20
e => 100

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #18
[0m[38;5;81mTesting lower_bound and upper_bound (const)[0m

Test 1 passed
Test 2 passed

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #19
[0m[38;5;81mTesting count member function[0m

Test 1 passed
Test 2 passed
Test 3 passed

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #20
[0m[38;5;81mTesting equal_range[0m

9

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #21
[0m[38;5;81mTesting equal_range const[0m

9

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #22
[0m[38;5;81mTesting compare operators[0m

Testing == 
tom and jerry are the SAME - they contains NOTHING.
Expected [38;5;75m1[0m, got : 1
Testing < 
tom and jerry are the SAME - they contains NOTHING.
Expected [38;5;75m0[0m, got : 0
Testing <= 
tom and jerry are the SAME - they contains NOTHING.
Expected [38;5;75m1[0m, got : 1
Testing > 
tom and jerry are the SAME - they contains NOTHING.
Expected [38;5;75m0[0m, got : 0
Testing >= 
tom and jerry are SAME - they contains NOTHING.
Expected [38;5;75m1[0m, got : 0
------------------------------------------------------------
Testing == 
Bob and Ron and DIFFERENT
Expected [38;5;75m0[0m, got : 0
Testing == 
bob and fred are DIFFERENT
Expected [38;5;75m0[0m, got : 0
Testing == 
george and fred are EQUAL
Expected [38;5;75m1[0m, got : 1
------------------------------------------------------------
Testing < 
bob and ron and SAME
Expected [38;5;75m0[0m, got : 0
Testing < 
bob and fred are DIFFERENT
Expected [38;5;75m0[0m, got : 0
Testing < 
george and fred are EQUAL
Expected [38;5;75m0[0m, got : 0
------------------------------------------------------------
Testing <= 
bob and ron and SAME
Expected [38;5;75m1[0m, got : 0
Testing <= 
bob and fred are DIFFERENT
Expected [38;5;75m1[0m, got : 0
Testing <= 
george and fred are EQUAL
Expected [38;5;75m1[0m, got : 1
------------------------------------------------------------
Testing > 
bob and ron and SAME
Expected [38;5;75m0[0m, got : 1
Testing > 
bob and fred are DIFFERENT
Expected [38;5;75m1[0m, got : 1
Testing > 
george and fred are EQUAL
Expected [38;5;75m1[0m, got : 0
------------------------------------------------------------
Testing >= 
bob and ron and SAME
Expected [38;5;75m0[0m, got : 1
Testing >= 
bob and ron and SAME
Expected [38;5;75m0[0m, got : 1
Testing >= 
bob and ron and SAME
Expected [38;5;75m0[0m, got : 1
------------------------------------------------------------

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #23
[0m[38;5;81mTesting swap[0m

foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
foo size is 3
bar size is 2

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #24
[0m[38;5;81mTesting reverse iterator[0m

z => 300
y => 200
x => 100
z => 300
y => 200
x => 100
z => 300
y => 200
x => 100

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #25
[0m[38;5;81mTesting operator[][0m

[38;5;27m-----------------------------------------------------------------------------
Printing bob
[38;5;39mmap size is 3
Key  = Value
[38;5;202mlol    =    [38;5;44m8
[38;5;202much    =    [38;5;44m23
[38;5;202mxD    =    [38;5;44m123

[38;5;4m-----------------------------------------------------------------------------[0m

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #26
[0m[38;5;81mTesting [0m

kirikou = 288230376151711743

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #27
[0m[38;5;81mTesting with my own custom compare struct[0m

[38;5;27m-----------------------------------------------------------------------------
Printing mp
[38;5;39mmap size is 6
Key  = Value
[38;5;202m90    =    [38;5;44m8
[38;5;202m80    =    [38;5;44mhey
[38;5;202m42    =    [38;5;44mfgzgxfn
[38;5;202m27    =    [38;5;44mbee
[38;5;202m25    =    [38;5;44mfunny
[38;5;202m12    =    [38;5;44mno

[38;5;4m-----------------------------------------------------------------------------[0m

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #28
[0m[38;5;81mTesting reverse_iterator constructor[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #29
[0m[38;5;81mTesting mli[0m

[38;5;27m-----------------------------------------------------------------------------
Printing map
[38;5;39mmap size is 5
Key  = Value
[38;5;202ma    =    [38;5;44m7
[38;5;202mb    =    [38;5;44m14
[38;5;202mc    =    [38;5;44m21
[38;5;202md    =    [38;5;44m28
[38;5;202me    =    [38;5;44m35

[38;5;4m-----------------------------------------------------------------------------[0m
rev_it - 1 = key: b | value: 14
TEST OFFSET
key: a | value: 7
key: b | value: 14
rev_it = key: e | value: 35
[rev] key: e | value: 35
[rev] key: d | value: 28
[rev] key: c | value: 21
[rev] key: b | value: 14
[rev] key: a | value: 7

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mTEST #1
[0m[38;5;81mTesting constructors[0m

[38;5;27m-----------------------------------------------------------------------------
Printing first
[38;5;39mset size is 0
Key  = Value

[38;5;4m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing first
[38;5;39mset size is 1
Key  = Value
[38;5;44m2    =    

[38;5;4m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing second
[38;5;39mset size is 5
Key  = Value
[38;5;44m10    =    
[38;5;44m20    =    
[38;5;44m30    =    
[38;5;44m40    =    
[38;5;44m50    =    

[38;5;4m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing third
[38;5;39mset size is 5
Key  = Value
[38;5;44m10    =    
[38;5;44m20    =    
[38;5;44m30    =    
[38;5;44m40    =    
[38;5;44m50    =    

[38;5;4m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing fifth
[38;5;39mset size is 0
Key  = Value

[38;5;4m-----------------------------------------------------------------------------[0m
[38;5;27m-----------------------------------------------------------------------------
Printing sixth
[38;5;39mset size is 0
Key  = Value

[38;5;4m-----------------------------------------------------------------------------[0m

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #2
[0m[38;5;81mTesting allocator getter[0m

The allocated array contains: 10 20 30 40 50

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #3
[0m[38;5;81mTesting begin()[0m

myset contains: 13 23 42 65 75

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #4
[0m[38;5;81mTesting clear[0m

myset contains: 100 200 300
myset contains: 1101 2202

[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #5
[0m[38;5;81mTesting allocator getter[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #6
[0m[38;5;81mTesting allocator getter[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #7
[0m[38;5;81mTesting allocator getter[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #8
[0m[38;5;81mTesting allocator getter[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #9
[0m[38;5;81mTesting allocator getter[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mTEST #10
[0m[38;5;81mTesting allocator getter[0m


[38;5;75m#########################################################
[0m[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
[38;5;75mAll tests done![0m
